apply from: 'buildsystem/dependencies.gradle'
apply from: 'buildsystem/projectDependencyGraph.gradle'
apply plugin: 'com.github.ben-manes.versions'

enum Environment {
    DEVELOP('com.ringoid.dating.develop', 'Ringoid Test', '"https://test.ringoidapp.com"', "-test"),
    PRODUCTION('com.ringoid.dating', 'Ringoid', '"https://prod.ringoidapp.com"', "-prod"),
    STAGING('com.ringoid.dating.staging', 'Ringoid Staging', '"https://stage.ringoidapp.com"', "-staging")

    String appId, appName, apiUrl, versionNameSuffix

    Environment(String appId, String appName, String apiUrl, String versionNameSuffix) {
        this.appId = appId
        this.appName = appName
        this.apiUrl = apiUrl
        this.versionNameSuffix = versionNameSuffix
    }
}

enum Onboarding {ADD_IMAGE, DIRECT}

static String getAppId(Environment env) { return env.appId }

static String getAppName(Environment env) { return env.appName }

static String getApiUrl(Environment env) { return env.apiUrl }

static String getFlurryApiKey(Environment env) {
    String apiKey = ""
    switch (env) {
        case Environment.PRODUCTION:
            apiKey = '"YCX7BXH7R9QWH6DB42J7"'
            break
        case Environment.DEVELOP:
        case Environment.STAGING:
        default:  // fallthrough by intention
            apiKey = '"KQ4JMH9TGM89SJD2XR5C"'
            break
    }
    return apiKey
}

static String getSentryDsn(Environment env) {
    String dsn = ""
    switch (env) {
        case Environment.PRODUCTION:
            dsn = '"https://8c58a698f71a4eccbd7e9f4c81b3eea9@sentry.io/1417641"'
            break
        case Environment.DEVELOP:
        case Environment.STAGING:
        default:  // fallthrough by intention
            dsn = '"https://e71e66c6bcfd4cbb8541f9a5536b0d9f@sentry.io/1387000"'
            break
    }
    return dsn
}

static String getVersionName(Environment env, int major, int minor, int build) {
    String version = "$major.$minor.$build"
    return "$version${env.versionNameSuffix}"
}

ext {
    env = Environment.STAGING
    onboarding = Onboarding.DIRECT  // change it to alter onboarding process
    onboardingExt = true  // enable or disable extension for onboarding process

    appName = getAppName(env)
    apiUrl = getApiUrl(env)
    isDevelop = env == Environment.DEVELOP
    isStaging = env == Environment.STAGING
    host = '"ringoid.com"'
    authority = '"https://ringoid.com"'
    appnav = '"appnav://ringoid.com"'
    flurryApiKey = getFlurryApiKey(env)
    sentryDSN = getSentryDsn(env)

    debounceClickMs = "500L"
    debounceInputMs = "200L"
    debounceInputNetworkMs = "500L"
    postDelayMs = "1000L"
    requestTimeThreshold = "6000L"  // repeat request up to this threshold
    responseTimeThreshold = "2000L"  // alert if network responded later
    retryCount = "12"
    retryDelayMs = "54L"
}

buildscript {
    apply from: 'buildsystem/version.gradle'

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${buildGradleVersion}"
        classpath "com.google.gms:google-services:${googleServicesVersion}"
        if (!project.hasProperty("disable-firebase-performance-plugin")) {
            classpath "com.google.firebase:perf-plugin:${firebasePerformancePluginVersion}"
        }
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:${kotlinVersion}"
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    ext {
        majorVersion = 4
        minorVersion = 0
        buildVersion = 287

        androidApplicationId = getAppId(env)
        androidVersionCode = buildVersion
        androidVersionName = getVersionName(env, majorVersion, minorVersion, buildVersion)
        testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
        testApplicationId = 'com.ringoid.app.test'

        // app configuration
        backToGalleryFromImagePreview = false
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion

                defaultConfig {
                    minSdkVersion rootProject.ext.minSdkVersion
                    targetSdkVersion rootProject.ext.targetSdkVersion
                    versionCode rootProject.ext.androidVersionCode
                    versionName rootProject.ext.androidVersionName
                    testInstrumentationRunner rootProject.ext.testInstrumentationRunner
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                sourceSets {
                    main {
                        java.srcDirs += 'src/main/kotlin'
                    }
                    androidTest.java.srcDirs += 'src/androidTest/kotlin'
                    test.java.srcDirs += 'src/test/kotlin'
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
